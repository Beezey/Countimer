{"name":"Countimer","tagline":"This is simple timer and counter Arduino library.","body":"# Countimer\r\n\r\nThis is simple timer and counter Arduino library.  \r\nOffers three work modes:\r\n\r\n * Count-up timer with call specified method when count is complete.\r\n * Count-down timer with call specified method when count is complete.\r\n * Calling any method at a specified time interval.\r\n\r\n\r\nIt allows you to start/pause, stop or restart timer.  \r\nThe following are public methods for actions:\r\n\r\n * void start()\r\n * void stop()\r\n * void pause()\r\n * void restart()\r\n \r\n \r\n Other methods:\r\n \r\n * byte getCurrentHours()\r\n * byte getCurrentMinutes()\r\n * byte getCurrentSeconds()\r\n * void setInterval()\r\n * String getCurrentTime()\r\n * bool isCounterCompleted()\r\n * bool isCounterRunning()\r\n * bool isStopped()\r\n \r\n \r\n\r\nAnd here's some sample code!\r\n\r\n```c\r\n#include \"Countimer.h\"\r\n\r\nCountimer timer;\r\n\r\nvoid setup() {\r\n\tSerial.begin(9600);\r\n    \r\n    // Set up count down timer with 10s and call method onComplete() when timer is complete.\r\n    // 00h:00m:10s\r\n\ttimer.setCounter(0, 0, 10, timer.COUNT_DOWN, onComplete);\r\n    \r\n    // Print current time every 1s on serial port by calling method refreshClock().\r\n    timer.setInterval(refreshClock, 1000);\r\n}\r\n\r\nvoid refreshClock() {\r\n\tSerial.print(\"Current count time is: \");\r\n    Serial.println(timer.getCurrentTime());\r\n}\r\n\r\nvoid onComplete() {\r\n\tSerial.println(\"Complete!!!\");\r\n}\r\n\r\nvoid loop() {\r\n\t// Run timer\r\n\ttimer.run();\r\n    \r\n    // Now timer is running and listening for actions.\r\n    // If you want to start the timer, you have to call start() method.\r\n    timer.start();\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}